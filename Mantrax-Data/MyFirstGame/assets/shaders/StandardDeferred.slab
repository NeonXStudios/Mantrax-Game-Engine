:Core 330

front
{
    param_out _COLOR = vec4 FragColor;

    param_in _COORDS = vec2 TexCoords;

    param _TXT = Texture2D gPosition
    param _TXT = Texture2D gNormal
    param _TXT = Texture2D gAlbedoSpec

    table Light {
        vec3 Position
        vec3 Color
        
        float Linear
        float Quadratic
    }

    const int NR_LIGHTS = 32
    param _LIGHTS = Light lights[NR_LIGHTS]
    param _Var = vec3 viewPos

    func main ()
    {
        vec3 FragPos = texture(gPosition, TexCoords).rgb
        vec3 Normal = texture(gNormal, TexCoords).rgb
        vec3 Diffuse = texture(gAlbedoSpec, TexCoords).rgb
        float Specular = texture(gAlbedoSpec, TexCoords).a
        
        vec3 lighting  = Diffuse * 0.1
        vec3 viewDir  = normalize(viewPos - FragPos)
        
        for(int i = 0; i < NR_LIGHTS; ++i)
        {
            vec3 lightDir = normalize(lights[i].Position - FragPos)
            vec3 diffuse = max(dot(Normal, lightDir), 0.0) * Diffuse * lights[i].Color

            vec3 halfwayDir = normalize(lightDir + viewDir)
            float spec = pow(max(dot(Normal, halfwayDir), 0.0), 16.0)
            vec3 specular = lights[i].Color * spec * Specular

            float distance = length(lights[i].Position - FragPos);
            float attenuation = 1.0 / (1.0 + lights[i].Linear * distance + lights[i].Quadratic * distance * distance)
            diffuse *= attenuation
            specular *= attenuation
            lighting += diffuse + specular;       
        }
        
        FragColor = vec4(lighting, 1.0)
    }
}

back
{
    layer(0) param_in _Pos = vec3 aPos
    layer(1) param_in _TxCoords = vec2 aTexCoords

    param_out _TexCoords = vec2 TexCoords

    func main ()
    {
        TexCoords = aTexCoords;
        _pos = vec4(aPos, 1.0);
    }
}