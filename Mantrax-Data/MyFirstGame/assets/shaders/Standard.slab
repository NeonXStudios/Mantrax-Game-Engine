:Core 330

front
{
    param_out _Color = vec4 FragColor
    param_in _Coords = vec2 TexCoords
    param_in _FragPos = vec3 FragPos
    param_in _Normal = vec3 Normal

    param _Texture = Texture2D texture_diffuse
    param _LightDir = vec3 lightDir
    param _LightColor = vec3 lightColor

    func main ()
    {
        vec3 ambientColor = vec3(0.3, 0.3, 0.3);
        vec3 lightColor = vec3(1.0, 1.0, 1.0); 
        vec3 ambient = ambientColor * lightColor;

        vec3 norm = normalize(Normal);
        vec3 lightDir = normalize(-lightDir);

        float diff = max(dot(norm, lightDir), 0.0);
        vec3 diffuse = diff * lightColor;

        vec4 texColor = TXT2D(texture_diffuse, TexCoords);
        FragColor = vec4((ambient + diffuse), 1.0) * texColor;
    }
}

back
{
    layer(0) param_in _Pos = vec3 aPos
    layer(1) param_in _Normal = vec3 aNormal
    layer(2) param_in _TxCoords = vec2 aTexCoords

    param_out _TexCoords = vec2 TexCoords   
    param_out _FragPos = vec3 FragPos
    param_out _Normal = vec3 Normal         

    param _Model = mat4 model
    param _CameraMatrix = mat4 camera_matrix

    func main ()
    {
        TexCoords = aTexCoords;
        FragPos = vec3(model * vec4(aPos, 1.0));
        Normal = mat3(transpose(inverse(model))) * aNormal;

        _pos = camera_matrix * model * vec4(aPos, 1.0);
    }
}